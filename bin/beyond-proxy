#!/usr/bin/env node
'use strict';

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

let _                          = require('lodash');
let CLIConfig                  = require('../lib/config');
let login                      = require('../lib/login');
let program                    = require('commander');
let Proxy                      = require('../lib/proxy');
let setupConsoleLoggingHelpers = require('../lib/setup-console-logging-helpers');

setupConsoleLoggingHelpers();

program
  .option('-c, --customer', 'Run against a customer account. Defaults to developer.')
  .option('-a, --account [value]', 'Use the given account ID as the default account to load. (Typically used together with the -c and -e options)')
  .option('-k, --key [value]', 'Path to a secure file where credentials are stored in the format username:password.')
  .option('-t, --token [value]', 'Impersonation token. This takes priority over -k|--key.')
  .option('-p, --port [value]', 'Use the given port for the web server.')
  .option('-o, --host [value]', 'Use the given host for the web server.')
  .option('-s, --ssl', 'Runs server using https protocol.')
  .option('-m, --vhost', 'If running in a virtual machine, use this flag to automatically listen on 0.0.0.0 instead of localhost by default.')
  .option('-e, --env [value]', 'The API environment to use. Defaults to production. Options: dev, staging, prod')
  .parse(process.argv);

try {

  let config = new CLIConfig(program);

  login(config)
    .then((loggedIn) => {

      if (loggedIn) {
        try {
          let runnerProcess = new Proxy(config);
          runnerProcess.start();
        } catch (ex) {
          return Promise.reject(ex);
        }
      }

    });

} catch (ex) {

  console.error(ex.stack || ex);
  return false;

}
